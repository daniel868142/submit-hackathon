RequestID,Query,Completion
2024-09-25-22-21-07-410-76c097b4606de5b56865,"TrialID: 0
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary based on the given input trade entry and field descriptions:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-21-13-782-7010bd1d72aec61a7325,"TrialID: 1
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here's the JSON dictionary based on the provided trade entry and the description of the fields:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```

Enclosing the JSON as requested:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-21-22-379-7593988a34e3ec2168a6,"TrialID: 2
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the requested JSON dictionary based on the given trade entry and fields:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-21-30-833-7cb290b56c62bdc34a9e,"TrialID: 3
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary as per the instructions:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""3: We pay: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-21-40-410-7ca19988a6c269e3864c,"TrialID: 4
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-22-00-034-7b22bc37a398c7dce61e,"TrialID: 5
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-22-04-539-76b3b46a24d19b5bcda9,"TrialID: 6
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-22-08-739-7f91b6689fa052472ade,"TrialID: 7
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the JSON output following the specified instructions:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```

This JSON object lists the parsed data for each field and their corresponding row formats as specified."
2024-09-25-22-22-13-524-7911b0063b84e50f4e9d,"TrialID: 8
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-22-19-543-72838dcc53aef3f22ef9,"TrialID: 9
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Sure, here is the JSON dictionary based on the given trade entry and field descriptions:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-22-26-414-7e718ea1bfd54a6aa58d,"TrialID: 10
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the parsed information in the requested format:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-22-32-291-7092b016fcd664ed0bee,"TrialID: 11
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-22-51-001-7472965d93110d3f292e,"TrialID: 12
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the JSON dictionary with the field names as keys, following the provided algorithm:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-22-58-785-7970a77d8b0ee6a86b9a,"TrialID: 13
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here's the JSON dictionary based on the provided trade entry and field descriptions:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-23-06-234-73739d7fa80c674b47f6,"TrialID: 14
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-23-11-969-7a31a4a12ff16412bca5,"TrialID: 15
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the JSON dictionary based on the input trade entry and the field descriptions provided:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-23-18-370-74f2beeb14bd5e74d41d,"TrialID: 16
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-23-25-325-7a0185fc202f50af6b5c,"TrialID: 17
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the parsed information from the trade entry as per the specified rules:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-23-33-873-7f60a967482c6061d3bf,"TrialID: 18
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""3: We pay: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-23-38-491-7952bb86ad7b137f27d8,"TrialID: 19
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-23-50-423-72a3994190489825a310,"TrialID: 20
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-23-55-396-7fa3afd3ed3fc6056ca5,"TrialID: 21
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-24-00-228-7d03bf2b49459c253785,"TrialID: 22
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-24-05-732-7e91abe93fc51d861406,"TrialID: 23
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-24-18-582-7980afa33dfec60b3355,"TrialID: 24
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the requested JSON dictionary based on the provided trade entry and field descriptions:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""1bn"",
      ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-24-22-797-7ec183fd56d47258c2b4,"TrialID: 25
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here's the JSON dictionary with the field names as keys following the specified algorithm:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```

This JSON captures all the relevant details for the specified fields from the provided trade entry description."
2024-09-25-22-24-28-062-702299ab347b6be0884f,"TrialID: 26
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the parsed information from the trade entry:
```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-24-33-494-77728b6c960b25a1a6e3,"TrialID: 27
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-24-37-990-7832937bdb0049ed8407,"TrialID: 28
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""1bn"",
      ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-24-43-356-7a138bb398235f2b4880,"TrialID: 29
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Sure, here's the extracted information formatted according to the provided instructions:
```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-24-52-249-7781b8c31133b770ba55,"TrialID: 30
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-24-58-888-7ef2b69297d720204e03,"TrialID: 31
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-25-03-437-7ed089d65318d587fdfc,"TrialID: 32
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the JSON dictionary based on the provided trade entry and field descriptions:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-25-11-068-75c08fe2e584bf91c1a5,"TrialID: 33
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-25-15-934-734296eb3785ff903e73,"TrialID: 34
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-25-24-126-78c2ae92d95123aefffa,"TrialID: 35
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-25-28-130-7690ba23fa1df93a6e96,"TrialID: 36
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-25-35-557-70439cb164f749d70374,"TrialID: 37
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary containing the required information:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""1bn"",
      ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
    }
  ] 
}
```

Please note:
- For the `FloatLegSpread` field, no relevant information is found, so the entry is empty.
- The `NotionalAmount` field is multiple, so it returns a list even though there is only one entry in the trade description."
2024-09-25-22-25-46-001-76838cfdaf56dbfc905a,"TrialID: 38
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-25-52-269-71d0939814e7cff44e80,"TrialID: 39
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated json dictionary based on the provided trade entry and field descriptions:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```

This JSON includes all the fields specified, with their corresponding data and formatted rows."
2024-09-25-22-25-58-021-7940a5df859af7584909,"TrialID: 40
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the JSON dictionary generated based on the input trade entry and the field descriptions:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    },
    {
      ""data"": ""USD floor at zero"",
      ""formatted_row"": ""8: Floor: We sell a {NotionalAmount} (6M USD Term SOFR)""
    }
  ]
}
```"
2024-09-25-22-26-05-172-7c7084749f0c3f0c5075,"TrialID: 41
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the JSON dictionary based on the input trade entry according to the described algorithm:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-26-11-772-7762b54db0afbb538e82,"TrialID: 42
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-26-16-300-73b3855b29cbbd38012a,"TrialID: 43
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""1bn"",
      ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-26-21-561-75318879bcbca3d5011d,"TrialID: 44
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-26-25-958-79c18ec48906e2ab61f9,"TrialID: 45
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the JSON dictionary with the required fields identified from the trade entry:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-26-32-756-71c0b17f28cb471e0fb6,"TrialID: 46
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-26-38-218-764381eaa1a034f42199,"TrialID: 47
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""6M USD Term SOFR"",
    ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": ""3: We pay: {FloatLegSpread}6M USD Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.45%"",
    ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""6: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""USD 1bn"",
      ""formatted_row"": ""2: Notional: {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-26-45-161-75c3baf8433b0ea14a96,"TrialID: 48
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""USD 1bn"",
            ""formatted_row"": ""2: Notional: {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-26-53-115-712198ea7f65b75df54b,"TrialID: 49
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M USD Term SOFR"",
        ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.45%"",
        ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""6: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""1bn"",
            ""formatted_row"": ""2: Notional: USD {NotionalAmount}""
        }
    ]
}
```"
