RequestID,Query,Completion
2024-09-25-22-17-29-489-7d50ae3eb6329f2e29c9,"TrialID: 0
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}, {""data"": ""1bn"", ""formatted_row"": ""1: Floored USD IRS Swap""}]
}
'''"
2024-09-25-22-17-33-565-7041927193e6d533b337,"TrialID: 1
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-17-38-296-7a738230a7d4e022566e,"TrialID: 2
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}, {""data"": ""1bn"", ""formatted_row"": ""1: Floored USD IRS Swap""}]
}
'''"
2024-09-25-22-17-43-963-7bb1837f0fbf4b9cb180,"TrialID: 3
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-17-48-739-713398254fa0cfcd6b02,"TrialID: 4
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": [{""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""}],
    ""FloatLegIndex"": [{""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""}],
    ""FloatLegSpread"": [{""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""}],
    ""FloatLegFrequency"": [{""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""}],
    ""FloatLegDaycountBasis"": [{""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""}],
    ""FixedLegCurrency"": [{""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""}],
    ""FixedLegFixedRate"": [{""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""}],
    ""FixedLegFrequency"": [{""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""}],
    ""FixedLegDaycountBasis"": [{""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""}],
    ""StartDate"": [{""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""}],
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-17-52-936-7342893909fe7a436a79,"TrialID: 5
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-17-57-386-76f38073b698c9b4ddf4,"TrialID: 6
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-18-00-983-78b18b239adf3f2cc25b,"TrialID: 7
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-18-06-192-7f529fdfc2c4413bc498,"TrialID: 8
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-18-10-086-7de2a6457312aa5c3ff9,"TrialID: 9
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-18-15-213-7782a3c91d626bff6edc,"TrialID: 10
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-18-19-804-77c3b9a15d4fb2fab9b9,"TrialID: 11
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-18-24-415-77c1a7da92adaaa0c391,"TrialID: 12
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-18-28-941-74228ea4d913943b095e,"TrialID: 13
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-18-32-986-7ec3a2639c9aa7c489c2,"TrialID: 14
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-18-37-059-735296f35e29c64c43dd,"TrialID: 15
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-18-40-685-7153ab30efb80ab8584d,"TrialID: 16
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}, {""data"": ""1bn"", ""formatted_row"": ""1: Floored USD IRS Swap""}]
}
'''"
2024-09-25-22-18-44-866-7270be2b72d70562561d,"TrialID: 17
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-18-50-265-7232a97620f30bf632f3,"TrialID: 18
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-18-54-642-7ff0ab027dd4a48cbd41,"TrialID: 19
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-18-58-466-7f20ae69e28537993c23,"TrialID: 20
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-19-03-172-7861b269aef3aed33b5b,"TrialID: 21
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}, {""data"": ""1bn"", ""formatted_row"": ""1: Floored USD IRS Swap""}]
}
'''"
2024-09-25-22-19-07-290-71b1a93dc527a59ccd57,"TrialID: 22
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-19-10-931-7ab3a048c356172e97c7,"TrialID: 23
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}, {""data"": ""1bn"", ""formatted_row"": ""1: Floored USD IRS Swap""}]
}
'''"
2024-09-25-22-19-15-854-7e238fc91ed18b92b283,"TrialID: 24
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-19-20-913-764296965dd0d5e05a71,"TrialID: 25
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-19-25-147-7bc08a6c68fe35c52161,"TrialID: 26
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-19-29-920-72e2bda6760628d0f807,"TrialID: 27
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}, {""data"": ""1bn"", ""formatted_row"": ""1: Floored USD IRS Swap""}]
}
'''"
2024-09-25-22-19-33-830-71c1852d50aa79691e96,"TrialID: 28
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": {""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}
}
'''"
2024-09-25-22-19-37-792-75d09e593e35b1ba9229,"TrialID: 29
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-19-44-019-7152b95669d2641240bd,"TrialID: 30
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-19-49-664-78119c9793b10d4db3f5,"TrialID: 31
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-19-53-084-7f5398514d3dd802922e,"TrialID: 32
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-19-57-534-74e2b6e8549c3085bf11,"TrialID: 33
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-20-01-829-77f0863f2a063fdadf5f,"TrialID: 34
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-20-05-742-71f2a9a021e7fd2b5f87,"TrialID: 35
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-20-09-296-7e309b4b7b117b555682,"TrialID: 36
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}, {""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-20-13-333-75209d5805b01801a356,"TrialID: 37
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-20-17-002-7612b9fea578938c8f27,"TrialID: 38
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-20-20-725-74f392512bb1f55d5266,"TrialID: 39
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-20-24-964-77c0b77b694f2f41ee35,"TrialID: 40
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-20-29-101-71f1ac9c3e9134d2928e,"TrialID: 41
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-20-33-640-7113ba22d114a24977ec,"TrialID: 42
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-20-37-901-72329f6aec9d974e4a38,"TrialID: 43
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-20-41-814-7633989c8f8e0a6603bb,"TrialID: 44
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: USD {NotionalAmount}""}]
}
'''"
2024-09-25-22-20-45-462-7dd2b5601f82732cd7a6,"TrialID: 45
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-20-50-044-790182135f0237f27c48,"TrialID: 46
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": {""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}
}
'''"
2024-09-25-22-20-54-277-7b329ae5e6e84bf1a9d6,"TrialID: 47
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-20-58-544-78309c4643d6d249c854,"TrialID: 48
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
2024-09-25-22-21-02-727-72c2a0fcfdd70bda1347,"TrialID: 49
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Floored USD IRS Swap
2: Notional: USD 1bn
3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360
4: We receive: USD fixed 3.45%, semi-annual, act/360
5: Notional exchange: None
6: Start: 10 November 2009
7: Tenor: 5 years
8: Floor: We sell a USD floor at zero (6M USD Term SOFR)
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary:

'''
{
    ""FloatLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""3: We pay: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegIndex"": {""data"": ""6M USD Term SOFR"", ""formatted_row"": ""3: We pay: {FloatLegIndex} (floating), semi-annual, act/360""},
    ""FloatLegSpread"": {""data"": """", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, act/360""},
    ""FloatLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""},
    ""FloatLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""3: We pay: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""},
    ""FixedLegCurrency"": {""data"": ""USD"", ""formatted_row"": ""4: We receive: {FixedLegCurrency} fixed 3.45%, semi-annual, act/360""},
    ""FixedLegFixedRate"": {""data"": ""3.45%"", ""formatted_row"": ""4: We receive: USD fixed {FixedLegFixedRate}, semi-annual, act/360""},
    ""FixedLegFrequency"": {""data"": ""semi-annual"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, {FixedLegFrequency}, act/360""},
    ""FixedLegDaycountBasis"": {""data"": ""act/360"", ""formatted_row"": ""4: We receive: USD fixed 3.45%, semi-annual, {FixedLegDaycountBasis}""},
    ""StartDate"": {""data"": ""10 November 2009"", ""formatted_row"": ""6: Start: {StartDate}""},
    ""NotionalAmount"": [{""data"": ""1bn"", ""formatted_row"": ""2: Notional: {NotionalAmount} USD""}]
}
'''"
