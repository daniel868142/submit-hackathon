RequestID,Query,Completion
2024-09-25-22-43-31-748-7041bcc5d01056a65e11,"TrialID: 0
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the parsed JSON dictionary for the given trade entry:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-43-43-347-71b29c1b80f3b04f4c83,"TrialID: 1
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the requested JSON output:

```
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-43-52-901-7af08355bcfbe582cb37,"TrialID: 2
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the required JSON output:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-44-04-787-77339c65bbbe75d1827f,"TrialID: 3
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-44-15-810-79e2a16142dfd1fa0ec2,"TrialID: 4
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the JSON dictionary based on the provided trade entry and field descriptions:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""USD Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-44-23-863-76f2b09db004c9cbfe49,"TrialID: 5
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-44-33-483-701290adde1574b32348,"TrialID: 6
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-44-41-294-7191b7897a11dce69d2c,"TrialID: 7
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{ 
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}"",
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}"",
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}"",
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}"",
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}"",
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}"",
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}"",
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}"",
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}"",
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}"",
        }
    ]
}
```"
2024-09-25-22-44-51-390-73d2a3e02cfc2af2b29b,"TrialID: 8
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-45-01-161-73b093b141794e50de23,"TrialID: 9
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here's the requested JSON dictionary:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-45-11-407-78b3a3771c310079259f,"TrialID: 10
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-45-20-047-7301a648aba329daae67,"TrialID: 11
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-45-28-142-7de3bcd5f0f90522081b,"TrialID: 12
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is a JSON dictionary based on the provided input trade entry and field descriptions:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-45-37-439-78a1bc29db2c67bd26c5,"TrialID: 13
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-45-47-831-7c52bdfd3ca3a202857f,"TrialID: 14
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-45-55-146-7e41992ac420c2806b44,"TrialID: 15
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-46-04-480-7ab1bf03f7221531e526,"TrialID: 16
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-46-14-960-7c938a1c841545b4ace1,"TrialID: 17
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-46-22-830-70309271e78329c8392f,"TrialID: 18
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-46-34-808-77e2a7fef78e8515863e,"TrialID: 19
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""6M Term SOFR"",
        ""formatted_row"": ""2: Party A pays: {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-46-42-371-76d09708eed4d1a9636f,"TrialID: 20
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the JSON containing the extracted data formatted as specified:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""USD Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-46-50-526-7c109bb2fd3360b3ce8e,"TrialID: 21
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-46-57-337-76c1bd5f3d074747318a,"TrialID: 22
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-47-15-196-77e38f30d730e7438ca0,"TrialID: 23
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here's the JSON dictionary with the identified fields in the trade entry, formatted accordingly:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-47-29-165-7fe19ec08670bed2164b,"TrialID: 24
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-47-36-747-7033aa52f570c723266f,"TrialID: 25
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the generated JSON dictionary with the requested fields and their corresponding data:
```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount} USD""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount} USD""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount} USD""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount} USD""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount} USD""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount} USD""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount} USD""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount} USD""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount} USD""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount} USD""
        }
    ]
}
```"
2024-09-25-22-47-47-106-73f3af98f501ed97da71,"TrialID: 26
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-47-56-002-764389a6987b6122fedc,"TrialID: 27
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-48-03-793-72038baf18c8690317df,"TrialID: 28
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-48-12-497-70908e9f210e0e2d7bd4,"TrialID: 29
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Sure, here is the JSON output based on the given trade entry and field descriptions:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-48-23-344-72b1b450e1dbe0e3df42,"TrialID: 30
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}%, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-48-32-407-72c2bee70e013d99084c,"TrialID: 31
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-48-42-416-7c23a570b70a57f886ab,"TrialID: 32
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-48-52-032-7e31a58432ff839e1944,"TrialID: 33
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-49-01-165-7a029f8061050dc17852,"TrialID: 34
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-49-07-784-7071a7e4faf0a2d4a46d,"TrialID: 35
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-49-17-209-7a0181be6431003672c2,"TrialID: 36
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-49-25-144-7802b36862f768fa52f7,"TrialID: 37
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount} (USD)""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount} (USD)""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount} (USD)""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount} (USD)""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount} (USD)""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount} (USD)""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount} (USD)""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount} (USD)""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount} (USD)""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount} (USD)""
    }
  ]
}
```"
2024-09-25-22-49-36-193-7b21993aa892d6086881,"TrialID: 38
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the JSON dictionary with the field names as keys, created according to the algorithm described:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-49-47-199-7120810f7a32b9f8182b,"TrialID: 39
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the requested json dictionary based on the input trade entry:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
    ]
}
```"
2024-09-25-22-49-56-919-78d38d82e0555499dd42,"TrialID: 40
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-50-04-898-781187ee48e1349cbc88,"TrialID: 41
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-50-28-205-72c3998158c854049d44,"TrialID: 42
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-50-36-612-76a18c22d87e96dd202c,"TrialID: 43
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the requested JSON dictionary:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-50-47-782-77319f42a34fc9456df7,"TrialID: 44
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-50-55-035-72c18ee5a08cdefe5a9e,"TrialID: 45
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": ""6M"",
        ""formatted_row"": ""2: Party A pays: {FloatLegSpread} USD Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-51-01-870-7391b8601d8de9c0c0a3,"TrialID: 46
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""Term SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```"
2024-09-25-22-51-16-534-7873b2f89124a543881d,"TrialID: 47
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here is the json dictionary generated according to your instructions:

```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
2024-09-25-22-51-25-289-7241906180b785e00d49,"TrialID: 48
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","Here's the generated JSON based on the provided trade entry and field descriptions:

```json
{
  ""FloatLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
  },
  ""FloatLegIndex"": {
    ""data"": ""SOFR"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term {FloatLegIndex} (floating), semi-annual, act/360""
  },
  ""FloatLegSpread"": {
    ""data"": """",
    ""formatted_row"": """"
  },
  ""FloatLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
  },
  ""FloatLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
  },
  ""FixedLegCurrency"": {
    ""data"": ""USD"",
    ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
  },
  ""FixedLegFixedRate"": {
    ""data"": ""3.20%"",
    ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
  },
  ""FixedLegFrequency"": {
    ""data"": ""semi-annual"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
  },
  ""FixedLegDaycountBasis"": {
    ""data"": ""act/360"",
    ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
  },
  ""StartDate"": {
    ""data"": ""10 November 2009"",
    ""formatted_row"": ""5: Start: {StartDate}""
  },
  ""NotionalAmount"": [
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
    },
    {
      ""data"": ""100,000,000.00"",
      ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
    },
    {
      ""data"": ""90,000,000.00"",
      ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
    },
    {
      ""data"": ""80,000,000.00"",
      ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
    },
    {
      ""data"": ""70,000,000.00"",
      ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
    },
    {
      ""data"": ""60,000,000.00"",
      ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
    },
    {
      ""data"": ""50,000,000.00"",
      ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
    },
    {
      ""data"": ""25,000,000.00"",
      ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
    }
  ]
}
```

This JSON properly reflects the structure and content specified in the trade entry, adapting it to the given field descriptions."
2024-09-25-22-51-36-495-70f2ac0aebceceadd231,"TrialID: 49
You will be given a description of a trade entry with numbered rows, followed by a list of fields to identify within that text.
Your task is to find relevant information about the field and reference to place in the row where you found the information.

Here is the input trade entry:
```
1: Notional: amortizing, as per schedule below
2: Party A pays: 6M USD Term SOFR (floating), semi-annual, act/360
3: Party A receives: USD fixed 3.20%, semi-annual, act/360
4: Notional exchange: None
5: Start: 10 November 2009
6: Tenor: 5 years
7: Notional Schedule
8: Notional Amount Schedule	
9: Effective From: Notional Amount: (USD)
10: 10-Nov-09 100,000,000.00
11: 10-May-10 100,000,000.00
12: 10-Nov-10 100,000,000.00
13: 10-May-11 100,000,000.00
14: 10-Nov-11 90,000,000.00
15: 10-May-12 80,000,000.00
16: 10-Nov-12 70,000,000.00
17: 10-May-13 60,000,000.00
18: 10-Nov-13 50,000,000.00
19: 10-May-14 25,000,000.00
```

The description of the fields you need to identify:
```
* FloatLegCurrency: string, single
* FloatLegIndex: string, single
* FloatLegSpread: float, single
* FloatLegFrequency: string, single
* FloatLegDaycountBasis: string, single
* FixedLegCurrency: string, single
* FixedLegFixedRate: float, single
* FixedLegFrequency: string, single
* FixedLegDaycountBasis: string, single
* StartDate: date, single
* NotionalAmount: float, multiple or single
```

Each field description contain datatype and occurrences type.
If the occurrences type is single you should look for a single place among that contains the most relevant information about the field.
If the occurrences type is multiple you should include every place that has information relevant to the field.
Datatype helps you understand what data you are looking for. However, when you are asked to get the piece of data you should copy it and return as a string always.

For each field you should do the following:
1. Find all data corresponding to the field in the trade entry.
2. If the occurrence type is single, then select only one piece of data that is the most relevant, if the occurrence type is multiple, then select all of them.
3. For every such piece of data create the following dictionary
{
    ""data"": <piece of data, string>,
    ""formatted_row"": <the original row from the description, with the extracted information replaced by the field name in curly brackets>
}
4. If the occurrence type is single, then the output should be one dictionary, if the occurrence type is multiple, then the answer should be list of dictionaries.
5. If there is no piece of data that has relevant information than the generated dictionary should have empty strings as default values.
6. Make sure that if you put the data into a formatted string, it will match the string in the input trade entry, do nor forgot row number.

Generate json dictionary with the field names as keys. The above algorithm describes how to create value for every field.

Enclose json in triple single quotes and ensure that it is parsable.","```json
{
    ""FloatLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""2: Party A pays: 6M {FloatLegCurrency} Term SOFR (floating), semi-annual, act/360""
    },
    ""FloatLegIndex"": {
        ""data"": ""Term SOFR"",
        ""formatted_row"": ""2: Party A pays: 6M USD {FloatLegIndex} (floating), semi-annual, act/360""
    },
    ""FloatLegSpread"": {
        ""data"": """",
        ""formatted_row"": """"
    },
    ""FloatLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), {FloatLegFrequency}, act/360""
    },
    ""FloatLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""2: Party A pays: 6M USD Term SOFR (floating), semi-annual, {FloatLegDaycountBasis}""
    },
    ""FixedLegCurrency"": {
        ""data"": ""USD"",
        ""formatted_row"": ""3: Party A receives: {FixedLegCurrency} fixed 3.20%, semi-annual, act/360""
    },
    ""FixedLegFixedRate"": {
        ""data"": ""3.20%"",
        ""formatted_row"": ""3: Party A receives: USD fixed {FixedLegFixedRate}, semi-annual, act/360""
    },
    ""FixedLegFrequency"": {
        ""data"": ""semi-annual"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, {FixedLegFrequency}, act/360""
    },
    ""FixedLegDaycountBasis"": {
        ""data"": ""act/360"",
        ""formatted_row"": ""3: Party A receives: USD fixed 3.20%, semi-annual, {FixedLegDaycountBasis}""
    },
    ""StartDate"": {
        ""data"": ""10 November 2009"",
        ""formatted_row"": ""5: Start: {StartDate}""
    },
    ""NotionalAmount"": [
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""10: 10-Nov-09 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""11: 10-May-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""12: 10-Nov-10 {NotionalAmount}""
        },
        {
            ""data"": ""100,000,000.00"",
            ""formatted_row"": ""13: 10-May-11 {NotionalAmount}""
        },
        {
            ""data"": ""90,000,000.00"",
            ""formatted_row"": ""14: 10-Nov-11 {NotionalAmount}""
        },
        {
            ""data"": ""80,000,000.00"",
            ""formatted_row"": ""15: 10-May-12 {NotionalAmount}""
        },
        {
            ""data"": ""70,000,000.00"",
            ""formatted_row"": ""16: 10-Nov-12 {NotionalAmount}""
        },
        {
            ""data"": ""60,000,000.00"",
            ""formatted_row"": ""17: 10-May-13 {NotionalAmount}""
        },
        {
            ""data"": ""50,000,000.00"",
            ""formatted_row"": ""18: 10-Nov-13 {NotionalAmount}""
        },
        {
            ""data"": ""25,000,000.00"",
            ""formatted_row"": ""19: 10-May-14 {NotionalAmount}""
        }
    ]
}
```"
